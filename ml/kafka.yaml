kind: Template
apiVersion: v1
metadata:
  name: kafka
  annotations:
    openshift.io/display-name: Kafka
    description: A zookeer and kafka all-in-one
    iconClass: icon-database
    tags: messaging,kafka,zookeeper
labels:
  template: kafka

parameters:
- name: NAME
  displayName: Name
  required: true
  value: kafka
- name: KAFKA_VERSION
  displayName: Kafka Version
  required: true
  value: "0.10.1.0"
- name: SCALA_VERSION
  displayName: Scala Version
  required: true
  value: "2.11"
- name: SCALE
  displayName: Number of nodes
  required: true
  value: "1"
- name: ZK_HEAP_OPTS
  displayName: Zookeeper JVM Heap options
  required: true
  value: "-Xmx512M -Xms512M"
- name: KAFKA_HEAP_OPTS
  displayName: Kafka JVM Heap options
  required: true
  value: "-Xmx1G -Xms1G"
- name: SERVER_NUM_PARTITIONS
  displayName: The default number of log partitions per topic
  description: >
    More partitions allow greater
    parallelism for consumption, but this will also result in more files across
    the brokers
  required: true
  value: "1"
- name: SERVER_DELETE_TOPIC_ENABLE
  displayName: Topic deletion enabled
  description: Switch to enable topic deletion or not, default value is false
  value: "false"
- name: SERVER_LOG_RETENTION_HOURS
  displayName: Log retention hours
  description: The minimum age of a log file to be eligible for deletion
  value: "168"
- name: KAFKA_ZK_LOCAL
  displayName: Use local zookeeper (*USE_LOCAL_ZOOKEEPER)
  description: Wheter you want to start a local zookeeper proccess into the same container
  required: true
  value: "true"
- name: SERVER_ZOOKEEPER_CONNECT
  displayName: Zookeeper conection list
  description: Type de zookeeper conection URL. This value takes effect when USE_LOCAL_ZOOKEEPER is false
  value: "localhost:2181"
- name: VOLUME_CAPACITY
  displayName: Volume capacity
  required: true
  value: "20Gi"

objects:
- apiVersion: v1
  kind: Service
  metadata:
    name: ${NAME}-svc
    labels:
      app: ${NAME}
    annotations:
      service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  spec:
    ports:
    - port: 9092
      name: server
    clusterIP: None
    selector:
      app: ${NAME}

- apiVersion: apps/v1alpha1
  kind: PetSet
  metadata:
    name: ${NAME}
  spec:
    serviceName: ${NAME}-svc
    replicas: ${SCALE}
    template:
      metadata:
        labels:
          app: ${NAME}
        annotations:
          pod.alpha.kubernetes.io/initialized: "true"
          scheduler.alpha.kubernetes.io/affinity: >
              {
                "podAntiAffinity": {
                  "requiredDuringSchedulingIgnoredDuringExecution": [{
                    "labelSelector": {
                      "matchExpressions": [{
                        "key": "app",
                        "operator": "In",
                        "values": ["${NAME}"]
                      }]
                    },
                    "topologyKey": "kubernetes.io/hostname"
                  }]
                }
              }
      spec:
        containers:
        - name: ${NAME}
          imagePullPolicy: Always
          image: bbvalabs/kafka
#          resources:
#            requests:
#              memory: "2Gi"
#              cpu: "1"
          ports:
          - containerPort: 9092
            name: broker-port
          env:
          - name:  KAFKA_VERSION
            value: ${KAFKA_VERSION}
          - name:  SCALA_VERSION
            value: ${SCALA_VERSION}
          - name : KAFKA_REPLICAS
            value: ${SCALE}
          - name:  KAFKA_ZK_LOCAL
            value: ${KAFKA_ZK_LOCAL}
          - name : ZK_HEAP_SIZE
            value: ${ZK_HEAP_SIZE}
          - name:  KAFKA_HEAP_OPTS
            value: ${KAFKA_HEAP_OPTS}
          - name:  SERVER_NUM_PARTITIONS
            value: ${SERVER_NUM_PARTITIONS}
          - name:  SERVER_DELETE_TOPIC_ENABLE
            value: ${SERVER_DELETE_TOPIC_ENABLE}
          - name:  SERVER_LOG_RETENTION_HOURS
            value: ${SERVER_LOG_RETENTION_HOURS}
          - name:  SERVER_ZOOKEEPER_CONNECT
            value: ${SERVER_ZOOKEEPER_CONNECT}
          command:
          - /bin/bash
          - -c
          - bin/kafka_start.sh
          readinessProbe:
            exec:
              command:
              - "bin/kafka_ok.sh"
            initialDelaySeconds: 15
            timeoutSeconds: 5
          livenessProbe:
            exec:
              command:
              - "bin/kafka_ok.sh"
            initialDelaySeconds: 15
            timeoutSeconds: 5
          volumeMounts:
          - name: kafka-volume
            mountPath: /kafka
#        securityContext:
#          runAsUser: 1000
#          fsGroup: 1000
    volumeClaimTemplates:
    - metadata:
        name: kafka-volume
        annotations:
          volume.alpha.kubernetes.io/storage-class: anything
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: ${VOLUME_CAPACITY}
